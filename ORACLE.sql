-- USUARIO DO BANCO DE DADOS
SHOW USER;

--TABELA DUMMY

SELECT 1 + 1 AS SOMA FROM DUAL;

--VERIFICANDO O AMBIENTE
--B023 -> 32 BITS
--B047 -> 64 BITS

SELECT METADATA FROM SYS.KOPM$;

--DICIONARIO DE DADOS

SELECT * FROM DICT;

--UNICA - RAC
-- EU ESTOU UTILIZANDO PARALELISMO?
SELECT PARALLEL FROM V$INSTANCE;

--ESTRUTURAS DE MEMORIA

SELECT COMPONENT, CURRENT_SIZE, MIN_SIZE, MAX_SIZE 
FROM V$SGA_DYNAMIC_COMPONENTS;

--CONECTANDO A OUTRO BANCO DE DADOS
SQLPLUS SYSTEM/SENHA@NOMEDOBANCO

--NOME DO BANCO DE DADOS
SELECT NAME FROM V$DATABASE;

--VERSÃO BANCO DE DADOS
SELECT BANNER FROM V$VERSION;

--VERIFICAR PRIVILEGIOS DE USUARIO
SELECT * FROM USER_SYS_PRIVS;

--TABELAS DO USUARIO
SELECT TABLE_NAME FROM USER_TABLES;

-- CRIAR TABELA

CREATE TABLE cursos(
	IDCURSO INT PRIMARY KEY,
	NOME VARCHAR2(30),
	CARGA INT
)TABLESPACE USERS;

CREATE TABLE TESTE(
	IDTESTE INT,
	NOME VARCHAR2(30)
);

--TABLESPACE E TABELAS
SELECT TABLE_NAME, TABLESPACE_NAME FROM USER_TABLES;

SELECT TABLE_NAME, TABLESPACE_NAME FROM USER_TABLES WHERE TABLE_NAME = 'CURSOS';

SELECT SEGMENT_NAME, SEGMENT_TYPE, TABLESPACE_NAME, BYTES, BLOCKS, EXTENTS FROM USER_SEGMENTS;

SELECT SEGMENT_NAME, SEGMENT_TYPE, TABLESPACE_NAME, BYTES, BLOCKS, EXTENTS FROM USER_SEGMENTS WHERE SEGMENT_NAME = 'CURSOS';

-- FORMATAÇÃO DE COLUNAS

COLUMN TABLESPACE_NAME FORMAT A20;
COLUMN SEGMENT_NAME FORMAT A20;
COLUMN SEGMENT_TYPE FORMAT A20;

--CUSTOMIZANDO TABLESPACE

CREATE TABLESPACE RECURSOS_HUMANOS
DATAFILE 'C:/DATA/RH_01.DBF'
SIZE 100M AUTOEXTEND
ON NEXT 100M
MAXSIZE 4096M;

ALTER TABLESPACE RECURSOS_HUMANOS
ADD DATAFILE 'C:/DATA/RH_02.DBF'
SIZE 200M AUTOEXTEND
ON NEXT 200M
MAXSIZE 4096M;


-- SITUAÇÃO DAS TABLESPACES
SELECT TABLESPACE_NAME, FILE_NAME FROM DBA_DATA_FILES;

--SEQUENCES

CREATE SEQUENCE SEQ_GERAL
START WITH 100
INCREMENT BY 10;

--CRIANDO TABELA NA TABLESPACE

CREATE TABLE FUNCIONARIOS(
	IDFUNCIONARIO INT PRIMARY KEY,
	NOME VARCHAR2(30)
)TABLESPACE RECURSOS_HUMANOS;

INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL, 'JOÃO');
INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL, 'CLARA');
INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL, 'LILIAN');

SELECT * FROM FUNCIONARIOS;

--CRIANDO TABLESPACE MARKETING

CREATE TABLESPACE MARKETING
DATAFILE 'C:/DATA/MKT_01.DBF'
SIZE 100M AUTOEXTEND
ON NEXT 100M
MAXSIZE 4096M;

CREATE TABLE CAMPANHA(
	IDCAMPANHA INT PRIMARY KEY,
	NOME VARCHAR2(30)
)TABLESPACE MARKETING;

INSERT INTO CAMPANHA VALUES(SEQ_GERAL.NEXTVAL, 'PRIMAVERA');
INSERT INTO CAMPANHA VALUES(SEQ_GERAL.NEXTVAL, 'VERÃO');
INSERT INTO CAMPANHA VALUES(SEQ_GERAL.NEXTVAL, 'INVERNO');

--ALTERANDO TABLESPACES
--COLOCANDO A ts OFFLINE

ALTER TABLESPACE RECURSOS_HUMANOS OFFLINE;

--APONTAR O DICIONARIO DE DADOS
ALTER TABLESPACE RECURSOS_HUMANOS RENAME DATAFILE 'C:/DATA/RH_02.DBF' TO 'C:/PRODUCAO/RH_02.DBF';
ALTER TABLESPACE RECURSOS_HUMANOS RENAME DATAFILE 'C:/DATA/RH_01.DBF' TO 'C:/PRODUCAO/RH_01.DBF';

ALTER TABLESPACE RECURSOS_HUMANOS ONLINE;

SELECT * FROM FUNCIONARIOS;

--PSEUDO COLUNAS
CREATE TABLE ALUNO(
	IDALUNO INT PRIMARY KEY,
	NOME VARCHAR2(30),
	EMAIL VARCHAR2(30),
	SALARIO NUMBER(10,2)
);

CREATE SEQUENCE SEQ_EXEMPLO;

INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL,'JOÃO','JOAO@EMAIL.COM',1000.00);
INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL,'CLARA','CLARA@EMAIL.COM',2000.00);
INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL,'CELIA','CELIA@EMAIL.COM',3000.00);

CREATE TABLE ALUNO2(
	IDALUNO INT PRIMARY KEY,
	NOME VARCHAR2(30),
	EMAIL VARCHAR2(30),
	SALARIO NUMBER(10,2)
);

INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL,'PEDRO','PEDRO@EMAIL.COM',2000.00);
INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL,'RENATA','RENATA@EMAIL.COM',2400.00);
INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL,'MARIA','MARIA@EMAIL.COM',3700.00);

--PSEUDO COLUNAS
--ROWID ROWNUM

SELECT ROWID, IDALUNO, NOME, EMAIL FROM ALUNO;

SELECT ROWID, ROWNUM, IDALUNO, NOME, EMAIL FROM ALUNO;

--PROCEDURE

CREATE OR REPLACE PROCEDURE BONUS (P_IDALUNO ALUNO.IDALUNO%TYPE, P_PERCENT NUMBER)
AS
BEGIN
	UPDATE ALUNO SET SALARIO = SALARIO +(SALARIO * (P_PERCENT /100))
	WHERE P_IDALUNO = IDALUNO;
END;
/

SELECT * FROM ALUNO;

CALL BONUS(2,100);


--TRIGGERS

CREATE OR REPLACE TRIGGER CHECK_SALARIO
BEFORE INSERT OR UPDATE ON ALUNO
FOR EACH ROW
BEGIN
	IF :NEW.SALARIO > 2000 THEN
	RAISE_APPLICATION_ERROR(-20000, 'VALOR INCORRETO');
	END IF;

END;
/

SHOW ERRORS;


INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL,'MAFRA','MAFRA@EMAIL.COM',100.00);

SELECT TRIGGER_NAME, TRIGGER_BODY
FROM USER_TRIGGERS;

--TRIGGER AUDITORIA

CREATE TABLE AUDITORIA(
	DATA_LOGIN DATE,
	LOGIN VARCHAR2(30)
);


CREATE OR REPLACE PROCEDURE LOGPROC IS
BEGIN
	INSERT INTO AUDITORIA(DATA_LOGIN, LOGIN)
	VALUES(SYSDATE, USER);

END LOGPROC;
/

CREATE OR REPLACE TRIGGER LOGTRIGGER
AFTER LOGON ON DATABASE
CALL LOGPROC
/


SELECT * FROM AUDITORIA;

--FALHA DE LOGON

CREATE OR REPLACE TRIGGER FALHA_LOGON
AFTER SERVERERROR
ON DATABASE
BEGIN
	IF (IS_SERVERERROR(1017)) THEN
	INSERT INTO AUDITORIA(DATA_LOGIN, LOGIN)
	VALUES(SYSDATE,'ORA-1017');
	END IF;

END FALHA_LOGON;
/

--TRIGGER DE DML

CREATE TABLE USUARIO (
	IDUSUARIO INT,
	NOME VARCHAR2(30)
);

CREATE TABLE BKP_USER (
	IDUSUARIO INT,
	NOME VARCHAR2(30)
);

INSERT INTO USUARIO VALUES(1, 'JOÃO');
INSERT INTO USUARIO VALUES(2, 'SERGIO');
COMMIT;

SELECT * FROM USUARIO;

CREATE OR REPLACE TRIGGER LOG_USUARIO
BEFORE DELETE ON USUARIO
FOR EACH ROW
BEGIN
	INSERT INTO BKP_USER VALUES
	(:OLD.IDUSUARIO, :OLD.NOME);
END;
/

SELECT * FROM BKP_USER;

DELETE FROM USUARIO WHERE IDUSUARIO = 1;

SELECT * FROM USUARIO;
SELECT * FROM BKP_USER;


--VIEWS

CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY,
	NOME VARCHAR2(30),
	SEXO CHAR(1)
);

INSERT INTO CLIENTE VALUES (1007,'MAFRA', 'M');

COMMIT;

SELECT * FROM CLIENTE;

CREATE OR REPLACE VIEW V_CLIENTE
AS
	SELECT IDCLIENTE, NOME, SEXO 
	FROM CLIENTE;
	

INSERT INTO V_CLIENTE VALUES (1008,'CLARA', 'F');

SELECT * FROM CLIENTE;
SELECT * FROM V_CLIENTE;


--VIEW SOMENTE LEITURA
CREATE OR REPLACE VIEW V_CLIENTE_RO
AS
	SELECT IDCLIENTE, NOME, SEXO 
	FROM CLIENTE
	WITH READ ONLY;


--VIEW JOIN
CREATE OR REPLACE VIEW RELATORIO
AS
	SELECT IDCLIENTE, NOME, NUMERO 
	FROM CLIENTE
	INNER JOIN TELEFONE
	ON IDCLIENTE = ID_CLIENTE;

--FORCE
CREATE OR REPLACE FORCE VIEW RELATORIO
AS
	SELECT IDCLIENTE, NOME, NUMERO 
	FROM CLIENTE
	INNER JOIN TELEFONE
	ON IDCLIENTE = ID_CLIENTE;


SELECT * FROM RELATORIO; --MOSTRA ERRO MAS A VIEW ESTÁ CRIADA


CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY,
	NUMERO VARCHAR2(10),
	ID_CLIENTE INT
);

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE;

INSERT INTO TELEFONE VALUES(1, '34456678', 1007);

COMMIT;

SELECT * FROM RELATORIO;


--DEFERRABLE CONSTRAINTS

CREATE TABLE FUNCIONARIO(
	IDFUNCIONARIO INT CONSTRAINT PK_FUNCIONARIO PRIMARY KEY,
	NOME VARCHAR2(30)
);

DROP TABLE TELEFONE;

CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY,
	NUMERO VARCHAR2(10),
	ID_FUNCIONARIO INT
);


ALTER TABLE TELEFONE ADD CONSTRAINT FK_TELEFONE
FOREIGN KEY(ID_FUNCIONARIO)REFERENCES FUNCIONARIO;

INSERT INTO FUNCIONARIO VALUES(1, 'MAURICIO');
INSERT INTO TELEFONE VALUES(10,'23453456',1);

--VERIFICANDO O ESTADO DAS CONSTRAINTS
--DEFERRED DIZ SE SERÁ CHEGADO NO MOMENTO DA DML(PADRÃO) OU DTL
--DEFERRABLE SE PODE SER ATRASADA (CHAVE SERÁ VERIFICADANA DML OU DTL) OU NÃO(CHAVE SERÁ VERIFICADANA DML)
SELECT CONSTRAINT_NAME, DEFERRABLE, DEFERRED
FROM USER_CONSTRAINTS WHERE TABLE_NAME IN('FUNCIONARIO','TELEFONE');


--APAGANDO A CONSTRAINT
ALTER TABLE TELEFONE DROP CONSTRAINT FK_TELEFONE;

--RECRIANDO A CONSTRAINT
ALTER TABLE TELEDONE ADD CONSTRAINT FK_TELEFONE
FOREIGN KEY(ID_FUNCIONARIO) REFERENCES FUNCIONARIO
DEFERRABLE;

SELECT CONSTRAINT_NAME, DEFERRABLE AS ATRASADA, DEFERRED AS VERIFICAÇÃO
FROM USER_CONSTRAINTS WHERE TABLE_NAME IN('FUNCIONARIO','TELEFONE'); --CHECAGEM AINDA ESTÁ IMEDIATA

INSERT INTO TELEFONE VALUES(4, '34543456', 10);  --CHAVE MÃE NÃO LOCALIZADA

--MUDANDO PARA DTL
--
SET CONSTRAINTS ALL DEFERRED

INSERT INTO TELEFONE VALUES(4, '34543456', 10); --AINDA MOSTRA IMMEDIATE, NÃO MUDA CONFORME MUDAMOS, MAS FUNCIONA

SELECT * FROM TELEFONE;
SELECT * FROM FUNCIONARIO; --SEM INTEGRIDADE REFERENCIAL, MAS ESTÁ INSERIDO

COMMENT; --VERIFICA TODA A INTEGRIDADE, E SE HOUVER DADOS SEM INTEGRIDADE, FAZ O ROLLBACK
